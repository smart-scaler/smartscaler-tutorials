eventAutoscaler:
  # time duration before the eventstarttime when first PR would be created
  # eg. 1h, 1d, 1w
  # default: 1h
  autoscalerProperties:
    eventConfigSyncFrequency: 5m
    defaultPrCreationDuration: 1h
    watchInterval: 5m # Interval to watch argocd application
    # Interval to wait (in seconds) before retrying failed PR creation
    defaultRetryInterval: 15
    # Number of times to retry failed PR creation
    defaultMaxRetryAttempts: 5
    scalingController:
      apiVersion: keda.sh/v1alpha1
      kind: ScaledObject
    pullRequestMergeSettings:
      autoMergeEnabled: true
      # time duration before the event-start when PR would be merged
      defaultMergeDuration: 5m
      # Force merge PR if auto merge fails
      forceMergeEnabled: false
  gitProperties:
    commitPrefix: "ci()"
    commitSuffix: "- Avesha Agent"
    commitSignoff: false
    commitAuthorName: ""
    commitAuthorEmail: ""
    prTitleFormat: "ci(): %s"
    prDescriptionFormat: ""
    prAssignees: []
    prReviewers: []
    prLabels: []
  logLevel: DEBUG
  image:
    repository: aveshasystems/agent-controller
    tag: v0.5.2
    pullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 500m
      memory: 128Mi
    requests:
      cpu: 10m
      memory: 64Mi
  gitOperationsService:
    name: git-operations
    image:
      repository: aveshasystems/autoscaler-git-operations
      tag: v0.2.6
      pullPolicy: IfNotPresent
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 200Mi
inferenceAgent:
  image:
    repository: aveshasystems/inference-agent
    tag: v2.0.0
    pullPolicy: IfNotPresent
  inferenceAgentConfig:
    app:
    - metric_labels:
        app: app1
        app_version: "1.0"
        customer: tenant-apollo
        kube_cluster_name: smart-scaler-agent-thescore
      metrics:
      - description: forwarded rps data from istio requests
        name: istio_requests_total_rate
        query: sum(rate(label_replace(istio_requests_total{namespace=~'app1', destination_workload=~'.*(nginx).*'},'kube_namespace',
          '$1', 'namespace', '(.*)')[2m:])) by (destination_service_name,response_code,destination_workload,source_workload,reporter,kube_namespace)
      - description: forwarded current number of pods
        name: current_pods
        query: sum by (kube_deployment,kube_namespace) (label_replace(label_replace(kube_deployment_spec_replicas{namespace=~'app1',deployment=~'.*(nginx).*'},
          'kube_deployment', '$1', 'deployment', '(.*)'),'kube_namespace', '$1', 'namespace',
          '(.*)'))
      - description: forwarded latency data from istio requests
        name: istio_request_duration_milliseconds_bucket_rate
        query: sum(irate(label_replace(istio_request_duration_milliseconds_bucket{namespace=~'app1',reporter=~'destination',
          destination_workload=~'.*(nginx).*'},'kube_namespace', '$1', 'namespace',
          '(.*)')[2m:])) by (le, response_code, destination_service_name, destination_workload,
          source_workload, reporter, kube_namespace)
      - description: forwarded cpu usage
        name: cpu_usage
        query: sum by (kube_deployment,kube_namespace) (label_replace(label_replace(rate(container_cpu_usage_seconds_total{namespace=~'app1',pod=~'.*(nginx).*'}[2m]),'kube_deployment','$1','pod','(.+)-(.+)-(.+)'),'kube_namespace',
          '$1', 'namespace', '(.*)'))*(10^9)
      - description: forwarded cpu requests
        name: cpu_requests
        query: sum by (kube_deployment,kube_namespace) (label_replace(label_replace(kube_pod_container_resource_requests{namespace=~'app1',container=~'.*[A-Za-z0-9].*|!POD',pod=~'.*(nginx).*',resource='cpu'},'kube_deployment','$1','pod','(.+)-(.+)-(.+)'),'kube_namespace',
          '$1', 'namespace', '(.*)'))
      - description: forwarded memory usage
        name: memory_usage
        query: (avg (label_replace(label_replace(container_memory_working_set_bytes{namespace=~'app1',pod=~'.*(nginx).*'},
          'kube_deployment', '$1', 'pod', '(.*)-(.*)-(.*)'), 'kube_namespace', '$1',
          'namespace', '(.*)')) by (kube_deployment,kube_namespace))
      - description: forwarded memory requests
        name: memory_requests
        query: sum by (kube_deployment,kube_namespace) (label_replace(label_replace(kube_pod_container_resource_requests{namespace=~'app1',container=~'.*[A-Za-z0-9].*|!POD',pod=~'.*(nginx).*',resource='memory'},'kube_deployment','$1','pod','(.+)-(.+)-(.+)'),'kube_namespace',
          '$1', 'namespace', '(.*)'))
      - description: forwarded pods scheduled
        name: pods_scheduled
        query: sum by (kube_deployment,kube_namespace) (label_replace(label_replace(kube_deployment_spec_replicas{namespace=~'app1',deployment=~'.*(nginx).*'},
          'kube_deployment', '$1', 'deployment', '(.*)'),'kube_namespace', '$1', 'namespace',
          '(.*)'))
      smart-scaler-enabled-services:
      - namespace: app1
        services:
        - nginx
    app_datasource:
      prometheus:
        url: http://10.100.248.141:9090
    metric_interval: 60
    push_interval: 15
    smartscaler_api:
      url: https://apigateway-apollo.saas1.smart-scaler.io
    smartscaler_job_name: app1-smart-scaler-agent
  #Please add your config in this section in the following format
  # app_datasource:
  #  datadog:
  #    url: ""
  #  prometheus:
  #    url: ""
  # smartscaler_api:
  #   url: ""
  # metric_interval:
  # push_interval:
  # smartscaler_job_name: ""
  # app:
  # - metric_labels:
  #     app: ""
  #     customer: ""
  #     app_version:
  #   metrics:
  #   - name: ""
  #     description: ""
  #     query: ""

imagePullSecretsName: "smart-scaler-image-pull-secret"
# leave the below fields empty if secrets are managed externally.
imagePullSecrets:
  repository: ## Value to be used incase using the docker hub images-  https://index.docker.io/v1/
  username:
  password:
  email:
  dockerconfigjson: ## Value to be used if using external secret mangers
dataSources:
  datadog:
    existingSecret: "" ## if existingSecret value is provided then below values will be ignored, use below keys in existing secret
    apiKey: ""
    appkey: ""
  prometheus:
    existingSecret: "" ## if existingSecret value is provided then below values will be ignored, use below keys in existing secret
    username: ""
    password: ""
smartscalerApi:
  existingSecret: "" ## if existingSecret value is provided then below values will be ignored, use below keys in existing secret
  username: "tenant-apollo-apigw-user"
  password: "Ts5FGwc5YTcGE"
smartscalerMetrics:
  existingSecret: "" ## if existingSecret value is provided then below values will be ignored, use below keys in existing secret
  username: "tenant-apollo-metricsgw-user"
  password: "O3CNeUaRZhpW0"
agentConfiguration:
  host:
  clusterDisplayName: smart-scaler-agent
  clientID:
  clientSecret:

configHelper:
  enabled: false
  api:
    replicaCount: 1
    name: "config-helper-api"
    image:
      repository: aveshasystems/smartscaler-config-helper-api
      tag: v1.0.4
      pullPolicy: IfNotPresent

    service:
      name: config-helper-api
      type: ClusterIP
      port: 8080
      targetPort: 8080

    resources:
      {}
      # limits:
      #  cpu: 100m
      #  memory: 128Mi
      # requests:
      #  cpu: 100m
      #  memory: 128Mi
  ui:
    replicaCount: 1
    name: "config-helper-ui"
    image:
      repository: aveshasystems/smartscaler-config-helper-ui
      tag: v1.0.3
      pullPolicy: IfNotPresent

    service:
      name: config-helper-ui
      type: ClusterIP
      port: 8080
      targetPort: 8080

    resources:
      {}
      # limits:
      #  cpu: 100m
      #  memory: 128Mi
      # requests:
      #  cpu: 100m
      #  memory: 128Mi