---
  {{- if and .Values.imagePullSecrets .Values.imagePullSecrets.repository .Values.imagePullSecrets.username .Values.imagePullSecrets.password }}
apiVersion: v1
data:
  .dockerconfigjson: {{
                        printf "{\"auths\":{\"%s\":{\"username\":\"%s\",\"password\":\"%s\",\"email\":\"%s\",\"auth\":\"%s\"}}}"
                        .Values.imagePullSecrets.repository
                        .Values.imagePullSecrets.username
                        .Values.imagePullSecrets.password
                        .Values.imagePullSecrets.email
                        (printf "%s:%s" .Values.imagePullSecrets.username .Values.imagePullSecrets.password | b64enc)
                         | b64enc
                     }}
kind: Secret
metadata:
  name: {{ .Values.imagePullSecretsName }}
type: kubernetes.io/dockerconfigjson
  {{- end }}
---

---
  {{- if and .Values.imagePullSecrets .Values.imagePullSecrets.dockerconfigjson}}
apiVersion: v1
data:
  .dockerconfigjson: {{ .Values.imagePullSecrets.dockerconfigjson }}
kind: Secret
metadata:
  name: {{ .Values.imagePullSecretsName }}
type: kubernetes.io/dockerconfigjson
  {{- end }}
---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: agent-controller
    app.kubernetes.io/instance: controller-manager
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: deployment
    app.kubernetes.io/part-of: agent-controller
    control-plane: controller-manager
  name: agent-controller-manager
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
        checksum/config: {{ include (print $.Template.BasePath "/admission-webhooks.yaml") . | sha256sum }}
      labels:
        control-plane: controller-manager
    spec:
      containers:
      - args:
        - --health-probe-bind-address=:8081
        - --metrics-bind-address=127.0.0.1:8080
        - --leader-elect
        - --cluster-display-name={{ required "A valid value is required!" .Values.agentConfiguration.clusterDisplayName}}
        - --agent-version={{.Chart.Version}}
        command:
        - /manager
        env:
        - name: AGENT_CONTROLLER_MANAGER_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LOG_LEVEL
          value: {{ .Values.eventAutoscaler.logLevel }}
        - name: GIT_OPERATIONS_SERVICE_NAME
          value: {{ .Values.eventAutoscaler.gitOperationsService.name }}
        - name: SAAS_API_HOST_URL
          value: {{ required "A valid value is required!" .Values.agentConfiguration.host}}
        - name: SMART_SCALER_AGENT_CLIENT_ID
          valueFrom:
            secretKeyRef:
              key: clientId
              name: smart-scaler-agent-api-credentials
              optional: false
        - name: SMART_SCALER_AGENT_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              key: clientSecret
              name: smart-scaler-agent-api-credentials
              optional: false
        image: '{{ .Values.eventAutoscaler.image.repository }}:{{ .Values.eventAutoscaler.image.tag }}'
        imagePullPolicy: {{ .Values.eventAutoscaler.image.pullPolicy }}
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        ports:
        - containerPort: 9443
          name: webhook-server
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
        volumeMounts:
        - mountPath: /config/autoscaler-config
          name: autoscaler-config-volume
        - mountPath: /tmp/k8s-webhook-server/serving-certs
          name: cert
          readOnly: true
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=0
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.13.1
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
      imagePullSecrets:
      - name: {{ .Values.imagePullSecretsName }}
      securityContext:
        runAsNonRoot: false
      serviceAccountName: agent-controller-controller-manager
      terminationGracePeriodSeconds: 10
      volumes:
      - configMap:
          name: agent-controller-autoscaler-config
        name: autoscaler-config-volume
      - name: cert
        secret:
          defaultMode: 420
          secretName: webhook-server-cert
---
